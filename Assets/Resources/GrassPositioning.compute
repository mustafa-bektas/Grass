#pragma kernel CSMain
#include "Assets/Shaders/Simplex.cginc"

struct GrassData
{
    float3 position;
    float rotation;
    float scale;
};

RWStructuredBuffer<GrassData> grassBuffer;
float2 areaSize;
int grassCount;
float seed;
float heightVariationFrequency;
float minHeightScale;
float maxHeightScale;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint index = id.y * 65536 + id.x; // max threads per dimension is 65536
    
    if (index >= (uint)grassCount) return;
    
    int gridWidth = (int)sqrt((float)grassCount);
    int gridHeight = (grassCount + gridWidth - 1) / float(gridWidth);
    
    int x = (int)(index % gridWidth);
    int z = (int)(index / gridWidth);
    
    float stepX = (gridWidth > 1) ? areaSize.x / (float)(gridWidth - 1) : 0.0;
    float stepZ = (gridHeight > 1) ? areaSize.y / (float)(gridHeight - 1) : 0.0;
    
    float3 position = float3(
        (gridWidth > 1) ? (x * stepX) - (areaSize.x * 0.5) : 0.0,
        0,
        (gridHeight > 1) ? (z * stepZ) - (areaSize.y * 0.5) : 0.0
    );

    position.x += snoise(float3(position.xz, 0.0f) * 1.0f) * 1.0f;
    position.z += snoise(float3(position.xz, 0.0f) * 2.0f) * 1.0f;
    
    float rotation = 0.0;
    
    // Calculate height variation using noise
    float heightNoise = abs(snoise(float3(position.xz, 0.0f) * heightVariationFrequency));
    float scale = lerp(minHeightScale, maxHeightScale, heightNoise);
    
    grassBuffer[index].position = position;
    grassBuffer[index].rotation = rotation;
    grassBuffer[index].scale = scale;
}
